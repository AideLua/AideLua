{
  {
    name="AndroLua+ (Recommend)",--显示的名称
    _type="androlua",--仅仅是标识而已
    subTemplateName="AndroLua",--子模板文件夹名
    useLoadlayout2=true,
    checkAppConfig=true,--检查应用名与包名，应用名与包名的输入名的编辑框id必须相同
    showElevation=false,
    layout={
      ScrollView;
      layout_height="fill";
      layout_width="fill";
      id="scrollView";
      {
        LinearLayout;
        layout_width="fill";
        layout_height="fill";
        orientation="vertical";
        layoutTransition=newLayoutTransition();
        {
          LinearLayout;
          layout_width="fill";
          id="androidXSwitchParent";
          background=ThemeUtil.getRippleDrawable(theme.color.rippleColorPrimary,true);
          {
            SwitchCompat;
            text="启用 AndroidX";
            layout_width="fill";
            padding="16dp";
            id="androidXSwitch";--此ID需固定不变
            clickable=false;
            textSize="16sp";
          };
        };
        "layouts.appConfigLayout";
        "layouts.appVersionsLayout";
        "layouts.androluaVersionsLayout";
        "layouts.complexLayout";
        "layouts.jarLibrariesLayout";
        "layouts.simpleLibrariesLayout";
      };
    },
    onInit=function(ids,config)
      --print(config.templateDirPath)

      local configVersionsGroup=ids.configVersionsGroup
      local androluaVersionsGroup=ids.androluaVersionsGroup
      local templatePath=config.templatePath--主模板路径
      local subTemplatePath=config.subTemplatePath--子模板路径

      --用于针对性停用
      local chipsList={}
      config.chipsList=chipsList

      --安卓X开关
      local androidXSwitch=ids.androidXSwitch
      local androidXState=NewProjectManager.getSharedData(config._type,"androidxstate") or false
      androidXSwitch.setChecked(androidXState)
      config.androidXState=androidXState
      ids.androidXSwitchParent.onClick=function()
        local nowState=androidXSwitch.isChecked()
        local newState=not(nowState)
        androidXSwitch.setChecked(newState)
        NewProjectManager.setSharedData(config._type,"androidxstate",newState)
        config.androidXState=newState
        NewProjectManager.refreshState("androidx",newState,chipsList)
      end

      local appCheckedText=NewProjectManager.getSharedData(config._type,"appVersion")
      for index,content in ipairs(config.templateConfig.versions.app) do
        NewProjectManager.addSingleChip(configVersionsGroup,content,appCheckedText,chipsList)
      end
      local aluaCheckedText=NewProjectManager.getSharedData(config._type,"androluaVersion")
      for index,content in ipairs(config.subTemplateConfig.versions.androlua) do
        NewProjectManager.addSingleChip(androluaVersionsGroup,content,aluaCheckedText,chipsList)
      end
      NewProjectManager.applySingleCheckGroup(ids.configVersionsGroup,config,"appVersion")
      NewProjectManager.applySingleCheckGroup(ids.androluaVersionsGroup,config,"androluaVersion")

      local enabledComplexLibs={}--复杂库
      local enabledJarLibs={}--Jar库
      local enabledSimpleLibs={}--简单库
      config.enabledComplexLibs=enabledComplexLibs
      config.enabledJarLibs=enabledJarLibs
      config.enabledSimpleLibs=enabledSimpleLibs

      --复杂库
      for viewIndex,content in ipairs(luajava.astable(File(subTemplatePath.."/complexLibraries").listFiles())) do
        if content.isDirectory() then
          for index,content in ipairs(luajava.astable(content.listFiles())) do
            if content.isDirectory() then
              local path=content.getPath()
              local chipConfig=getConfigFromFile(path.."/config.lua")
              chipConfig.path=path
              chipConfig.key=path
              chipConfig.viewIndex=viewIndex
              --content的名称代表版本
              --print(chipConfig.name,content.getName())
              chipConfig.title=("%s (%s)"):format(chipConfig.name,content.getName())
              chipConfig.enabledList=enabledComplexLibs
              NewProjectManager.addMultiChip(ids.complexLibrariesGroup,chipConfig,config._type,chipsList)
            end
          end
        end
      end

      --Jar库
      for viewIndex,libraryFile in ipairs(luajava.astable(File(subTemplatePath.."/jarLibraries").listFiles())) do
        if libraryFile.isDirectory() then
          for index,content in ipairs(luajava.astable(libraryFile.listFiles())) do
            if content.isDirectory() then
              local path=content.getPath()
              local chipConfig={}
              chipConfig.path=path
              chipConfig.key=path
              chipConfig.file=content
              chipConfig.viewIndex=viewIndex
              chipConfig.support="all"
              chipConfig.enabledList=enabledJarLibs
              chipConfig.title=("%s (%s)"):format(libraryFile.getName(),content.getName())
              NewProjectManager.addMultiChip(ids.jarLibrariesGroup,chipConfig,config._type,chipsList)
            end
          end
        end
      end

      --简单库
      for viewIndex,content in ipairs(luajava.astable(File(subTemplatePath.."/simpleLibraries").listFiles())) do
        if content.isDirectory() then
          local chipConfig={}
          local path=content.getPath()
          chipConfig.path=path
          chipConfig.key=path
          chipConfig.viewIndex=viewIndex
          chipConfig.support="all"
          chipConfig.title=content.getName()
          chipConfig.enabledList=enabledSimpleLibs
          NewProjectManager.addMultiChip(ids.simpleLibrariesGroup,chipConfig,config._type,chipsList)
        end
      end


      --页面滚动时调整阴影
      ids.scrollView.onScrollChange=function(view,l,t,oldl,oldt)
        MyAnimationUtil.ScrollView.onScrollChange(view,l,t,oldl,oldt,topCard)
        config.showElevation=t>0
      end

      --print(dump(config.androluaVersion))
      NewProjectManager.refreshState("androidx",androidXState,chipsList)
      --print(dump(enabledComplexLibs))
    end,
    onCreatePrj=function(ids,config,keys,formatList,unzipList)
      --print(dump(keys))
      local enabledComplexLibs={}--table列表，存放要用到的复杂库配置
      local enabledJarLibs={}--string列表，存放文件夹路径
      local enabledSimpleLibs={}--string列表，存放文件夹路径
      for index,content in pairs(config.enabledComplexLibs) do
        table.insert(enabledComplexLibs,{path=content.path,format=content.format,delete=content.delete})
      end
      for index,content in pairs(config.enabledJarLibs) do
        table.insert(enabledJarLibs,content.path)
      end
      for index,content in pairs(config.enabledSimpleLibs) do
        table.insert(enabledSimpleLibs,content.path)
      end
      AlertDialog.Builder(this)
      .setTitle(activity.getString(R.string.reminder))
      .setMessage(activity.getString(R.string.project_create_tip))
      .setPositiveButton(R.string.create,function()
        showLoadingDia(nil,R.string.creating)
        activity.newTask(config.newProjectFunc,config.updateFunc,config.callbackFunc)
        .execute({keys,formatList,unzipList,enabledComplexLibs,String(enabledJarLibs),String(enabledSimpleLibs),config.subTemplatePath})
      end)
      .setNegativeButton(android.R.string.cancel,nil)
      .show()
    end,
    onBuildConfig=function(ids,config,keysLists,formatList,unzipList)
      local templatePath=config.templatePath
      local subTemplatePath=config.subTemplatePath
      local androidXState=config.androidXState
      local appVer=config.appVersion[1]
      local aluaVer=config.androluaVersion[1]
      table.insert(keysLists,{androluaVersion=aluaVer,androluaVersionCode=config.androluaVersion[2]})
      NewProjectManager.addTemplateZipsToUnzipList(unzipList,config.templatePath.."/baseTemplate/appTemplate/"..appVer,androidXState)
      NewProjectManager.addTemplateZipsToUnzipList(unzipList,config.subTemplatePath.."/baseTemplate/androluaTemplate/"..aluaVer,androidXState)
      for index,content in pairs(config.enabledComplexLibs) do
        table.insert(keysLists,content.keys)
      end
    end,
    newProjectFunc=function(keys,formatList,unzipList,enabledComplexLibs,enabledJarLibs,enabledSimpleLibs,subTemplatePath)
      return pcall(function()
        require "import"
        notLoadTheme=true
        require "jesse205"
        import "net.lingala.zip4j.ZipFile"
        this.update(activity.getString(R.string.project_create_gathering))

        keys=luajava.astable(keys,true)
        formatList=luajava.astable(formatList)
        unzipList=luajava.astable(unzipList)
        enabledComplexLibs=luajava.astable(enabledComplexLibs,true)
        --enabledJarLibs=luajava.astable(enabledJarLibs)
        --enabledSimpleLibs=luajava.astable(enabledSimpleLibs)
        import "NewProjectUtil2"

        import "com.jesse205.util.FileUtil"

        --this.update(dump(keys))
        local appName=keys.appName--文件夹名/应用名
        local aluaVer=keys.androluaVersion
        local projectPath=NewProjectUtil2.PRJS_PATH.."/"..appName--此工程根文件夹路径
        local projectFile=File(projectPath)
        local mainProjectPath=projectPath.."/app/src/main"
        local mainLibsPath=projectPath.."/app/libs"
        local mainLibsFile=File(mainLibsPath)

        --解压基础文件
        this.update(activity.getString(R.string.project_create_unzip_base))
        for index,content in pairs(unzipList) do
          NewProjectUtil2.unzip(content,projectPath)
        end

        this.update(activity.getString(R.string.project_create_unzip_slibs))
        for index=0,#enabledSimpleLibs-1 do
          local path=enabledSimpleLibs[index]
          local file=File(path)
          if file.isFile() then
            NewProjectUtil2.unzip(path,mainProjectPath)
           else
            --通用模版
            NewProjectUtil2.unzip(path.."/currency.zip",mainProjectPath)

            --Androlua定制
            NewProjectUtil2.unzip(("%s/%s.zip"):format(path,aluaVer),mainProjectPath)
          end
        end
        luajava.clear(enabledSimpleLibs)

        this.update(activity.getString(R.string.project_create_unzip_jarlibs))
        for index=0,#enabledJarLibs-1 do
          FileUtil.copyDir(File(enabledJarLibs[index]),mainLibsFile,true)
        end
        luajava.clear(enabledJarLibs)

        this.update(activity.getString(R.string.project_create_unzip_clibs))
        for index,content in pairs(enabledComplexLibs) do
          local deletePaths=content.delete
          if deletePaths then
            for index,content in pairs(deletePaths) do
              LuaUtil.rmDir(File(projectPath.."/"..content))
            end
          end
        end

        for index,content in pairs(enabledComplexLibs) do
          local path=content.path
          local libProjectPath=path.."/project.zip"
          local libAssetsPath=path.."/assets.zip"
          local libJarPath=path.."/jarLibs.zip"
          local libLuaLibsPath=path.."/luaLibs.zip"
          local libJniLibsPath=path.."/jniLibs.zip"
          local libResPath=path.."/res.zip"

          NewProjectUtil2.unzip(libProjectPath,projectPath)
          NewProjectUtil2.unzip(libAssetsPath,mainProjectPath.."/assets_bin")
          NewProjectUtil2.unzip(libJarPath,mainLibsPath)
          NewProjectUtil2.unzip(libLuaLibsPath,mainProjectPath.."/luaLibs")
          NewProjectUtil2.unzip(libJniLibsPath,mainProjectPath.."/jniLibs")
          NewProjectUtil2.unzip(libResPath,mainProjectPath.."/res")

          local libFormatFilesList=content.format
          if libFormatFilesList then
            NewProjectUtil2.addItemsToTable(formatList,libFormatFilesList)
          end
        end
        this.update(activity.getString(R.string.project_create_write))

        NewProjectUtil2.loadKeysFormatter(subTemplatePath.."/keysFormatter.aly")
        local reallyKeysMap={}
        for index,content in ipairs(formatList) do
          local path=projectPath.."/"..content
          local fileContent=io.open(path):read("*a")
          fileContent=NewProjectUtil2.buildKeysInContent(fileContent,keys,reallyKeysMap)
          io.open(path,"w"):write(fileContent):close()
        end
        return projectPath
      end)

    end,
    updateFunc=function(newValue)
      showLoadingDia(newValue)
    end,
    callbackFunc=function(success,value)
      closeLoadingDia()
      if success then
        activity.result({"project_created_successfully",value})
       else
        AlertDialog.Builder(activity)
        .setTitle(activity.getString(R.string.project_create_failed))
        .setMessage(value)
        .setPositiveButton(android.R.string.ok,nil)
        .show()
      end
    end

  },
  {
    name="LuaJ++",
    _type="luaj",
    subTemplateName="LuaJ",
    useLoadlayout2=true,
    checkAppConfig=true,
    helloWorld=true,--不可用标识
    androidXState=false,--永远用不到AndroidX那就直接设置false即可
    showElevation=false,
    layout={
      ScrollView;
      layout_height="fill";
      layout_width="fill";
      {
        LinearLayout;
        layout_width="fill";
        layout_height="fill";
        orientation="vertical";
        layoutTransition=newLayoutTransition();
        MyTipLayout.Builder({
          layout_margin="16dp";
          layout_marginTop="8dp";
          layout_marginBottom="8dp";
          cardBackgroundColor=theme.color.Ripple.Orange;
          {
            {
              imageResource=R.drawable.ic_alert_circle_outline;
              colorFilter=theme.color.Orange;
            },
            {
              text="此模板暂时无法使用，敬请期待";
              textColor=theme.color.Orange;
            }
          }
        });
        "layouts.appConfigLayout";
        "layouts.appVersionsLayout";
      };
    },
  },
  --[[
  {
    name="FusionApp v1",
    _type="fa",
    subTemplateName="FusionApp",
    useLoadlayout2=true,
    checkAppConfig=true,
    helloWorld=true,--不可用标识
    androidXState=false,--永远用不到AndroidX那就直接设置false即可
    layout={
      ScrollView;
      layout_height="fill";
      layout_width="fill";
      {
        LinearLayout;
        layout_width="fill";
        layout_height="fill";
        orientation="vertical";
        layoutTransition=newLayoutTransition();
        MyTipLayout.Builder({
          layout_margin="16dp";
          layout_marginTop="8dp";
          layout_marginBottom="8dp";
          cardBackgroundColor=theme.color.Ripple.Orange;
          {
            {
              imageResource=R.drawable.ic_alert_circle_outline;
              colorFilter=theme.color.Orange;
            },
            {
              text="此模板暂时无法使用，敬请期待";
              textColor=theme.color.Orange;
            }
          }
        });
        "layouts.appConfigLayout";
      };
    },
    onSelected=function(ids,config)
      --createButton.setEnabled(false)
    end
  },]]
}