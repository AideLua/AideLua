import{_ as a,p as e,q as n,a1 as s}from"./framework-ea2a9e6e.js";const d={},i=s(`<h1 id="luaadapter-适配器" tabindex="-1"><a class="header-anchor" href="#luaadapter-适配器" aria-hidden="true">#</a> LuaAdapter 适配器</h1><p>列表适配器就是沟通数据与视图的桥梁，在 AndroLua+ 内置了两个适配器LuaArrayAdapter 和 LuaAdapter</p><h2 id="luaarrayadapter" tabindex="-1"><a class="header-anchor" href="#luaarrayadapter" aria-hidden="true">#</a> LuaArrayAdapter</h2><p>LuaArrayAdapter 相对比较简单，仅可以简单展示图片或文字列表</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>adp <span class="token operator">=</span> <span class="token function">LuaArrayAdapter</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> layout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数中 <code>avtivity</code> 为当前活动，<code>layout</code> 为项目布局，布局仅支持基本视图如 <code>TextView</code> <code>ImageView</code> 等，不支持布局嵌套</p><ul><li>使用 <code>adp.add(数据)</code> 添加数据</li><li>视图为 <code>TextView</code> 时，数据就是要显示的文字</li><li>视图为 <code>ImageView</code> 时，数据为要显示的图片的相对或绝对路径</li></ul><h2 id="luaadapter" tabindex="-1"><a class="header-anchor" href="#luaadapter" aria-hidden="true">#</a> LuaAdapter</h2><p>LuaAdapter 可以实现复杂列表的展示，</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>adp <span class="token operator">=</span> <span class="token function">LuaAdapter</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> data<span class="token punctuation">,</span> layout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数中 <code>activity</code> 为当前活动，<code>data</code> 为要显示的数据表，<code>layout</code> 为列表布局，支持任意嵌套</p><p>这里需要注意列表项目布局的 <code>id</code> 对外不可见，可以在列表点击回调函数 <code>onItemClick(l,v,p,i)</code> 的第二个参数中获得</p><p>使用 <code>v.tag.id</code> 可以获取列表项目中的具体视图对象</p><p>但是不可以直接通过这个对象改变它的属性，因为在视图回收过程中你改变的属性会被覆盖或者污染，只能使用改变数据的方式改变视图属性</p><p><code>data</code> 数据表可以是简单模式，或者完整模式，也可以使用混合模式</p><ul><li>简单模式使用 <code>id=value</code> 的形式，<code>value</code> 使用自动判断的方式对id对应的视图设置文字或者图片</li><li>完整模式使用 <code>id={field=value}</code> 的形式，可以方便设置一个视图的多个值，需要注意的是，必须的列表数据的每一项使用相同的属性，不可以在某一个项目中缺少否则视图显示将会混乱</li><li>混合模式是有的视图使用简单模式，有的视图使用完整模式，但是同一id的视图必须使用相同的模式</li></ul><div class="custom-container warning"><p class="custom-container-title">警告</p><p>数据的添加，你可以在构建前或构建后对 <code>data</code> 进行添加，删除或修改。如果列表已经显示，需要调用 <code>adp.notifyDataSetChanged()</code> 更新显示，否则将导致数据显示不及时的问题！</p></div><h3 id="数据添加" tabindex="-1"><a class="header-anchor" href="#数据添加" aria-hidden="true">#</a> 数据添加</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>id1<span class="token operator">=</span>value1<span class="token punctuation">,</span> id2<span class="token operator">=</span>value2<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体说明参考上边关于三种模式的说明</p><h3 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>idx</code> 为列表项目的序号，从1开始计数</p><h3 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token punctuation">{</span>id1<span class="token operator">=</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数据的格式同上 <code>idx</code> 为列表项目序号，从1开始计数</p><h3 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>field<span class="token operator">=</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>idx</code> 为项目序号</li><li><code>id</code> 为视图id</li><li><code>field</code> 为要改变的属性</li><li><code>value</code> 为属性的值 如果该项目为简单模式</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="列表回调函数的参数说明" tabindex="-1"><a class="header-anchor" href="#列表回调函数的参数说明" aria-hidden="true">#</a> 列表回调函数的参数说明</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>onItemClick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> view<span class="token punctuation">,</span> position<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parent</code> 当前列表</li><li><code>view</code> 当前项目视图</li><li><code>position</code> 从0开始计数的项目序号</li><li><code>id</code> 从1开始计数的项目序号</li></ul><p>该说明仅针对使用 <code>LuaAdapter</code> 的列表</p><h2 id="luamultiadapter-多布局适配器" tabindex="-1"><a class="header-anchor" href="#luamultiadapter-多布局适配器" aria-hidden="true">#</a> LuaMultiAdapter 多布局适配器</h2><p>和 LuaAdapter 用法基本一致，仅说明不同部分</p><ul><li>构建时传入布局数组</li><li>添加数据时有 <code>__type</code> 属性，值为该项目使用布局在构建时的索引</li><li>设置动画时传入动画函数数组，顺序与布局数组相同</li></ul>`,37),t=[i];function c(l,o){return e(),n("div",null,t)}const u=a(d,[["render",c],["__file","15.2.html.vue"]]);export{u as default};
