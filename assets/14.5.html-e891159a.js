import{_ as a,p as n,q as e,a1 as s}from"./framework-ea2a9e6e.js";const t={},c=s(`<h1 id="http-异步网络模块" tabindex="-1"><a class="header-anchor" href="#http-异步网络模块" aria-hidden="true">#</a> Http 异步网络模块</h1><h2 id="获取内容-get函数" tabindex="-1"><a class="header-anchor" href="#获取内容-get函数" aria-hidden="true">#</a> 获取内容 get函数</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookie<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>url</code> 网络请求的链接网址</li><li><code>cookie</code> 使用的cookie，也就是服务器的身份识别信息</li><li><code>charset</code> 内容编码</li><li><code>header</code> 请求头</li><li><code>callback</code> 请求完成后执行的函数 除了url和callback其他参数都不是必须的</li></ul><p>回调函数接受四个参数值分别是</p><ul><li><code>code</code> 响应代码，<code>2xx</code> 表示成功，<code>4xx</code> 表示请求错误，<code>5xx</code> 表示服务器错误，<code>-1</code> 表示出错</li><li><code>content</code> 内容，如果code是 <code>-1</code> ，则为出错信息</li><li><code>cookie</code> 服务器返回的用户身份识别信息</li><li><code>header</code> 服务器返回的头信息</li></ul><h2 id="向服务器发送数据-post函数" tabindex="-1"><a class="header-anchor" href="#向服务器发送数据-post函数" aria-hidden="true">#</a> 向服务器发送数据 post函数</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cookie<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>data</code> 向服务器发送的数据 除了增加了一个data外，其他参数和get完全相同</li></ul><h2 id="下载文件-download函数" tabindex="-1"><a class="header-anchor" href="#下载文件-download函数" aria-hidden="true">#</a> 下载文件 download函数</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Http<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">,</span> cookie<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数中没有编码参数，其他同get</p><ul><li><code>path</code> 文件保存路径</li></ul><p>需要特别注意一点，只支持同时有127个网络请求，否则会出错</p><h2 id="http-httptask" tabindex="-1"><a class="header-anchor" href="#http-httptask" aria-hidden="true">#</a> Http.HttpTask</h2><p><code>Http</code> 其实是对 <code>Http.HttpTask</code> 的封装，<code>Http.HttpTask</code> 使用的更加通用和灵活的形式</p><p>参数格式如下</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Http<span class="token punctuation">.</span><span class="token function">HttpTask</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> String method<span class="token punctuation">,</span> cookie<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> header<span class="token punctuation">,</span>  callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>url</code> 请求的网址</li><li><code>method</code> 请求方法可以是 <code>get</code> ，<code>post</code> ，<code>put</code> ，<code>delete</code> 等</li><li><code>cookie</code> 身份验证信息</li><li><code>charset</code> 内容编码</li><li><code>header</code> 请求头</li><li><code>callback</code> 回调函数 所有参数都是必选，没有则传入 <code>nil</code></li></ul><p>该函数返回的是一个 <code>HttpTask</code> 对象，需要调用 <code>execute</code> 方法才可以执行</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>t<span class="token operator">=</span>Http<span class="token punctuation">.</span><span class="token function">HttpTask</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
t<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>调用的括号是花括号，也就是说，内容可以是字符串或者 byte 数组</p></div><p>使用这个形式可以自己封装异步上传函数</p>`,23),o=[c];function l(p,d){return n(),e("div",null,o)}const u=a(t,[["render",l],["__file","14.5.html.vue"]]);export{u as default};
