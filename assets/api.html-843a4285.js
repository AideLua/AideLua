import{_ as a,p as n,q as s,a1 as e}from"./framework-ea2a9e6e.js";const t={},i=e(`<h1 id="部分函数参考" tabindex="-1"><a class="header-anchor" href="#部分函数参考" aria-hidden="true">#</a> 部分函数参考</h1><ul><li>AndroLua 库函数在 <code>import</code> 模块，为便于使用都是全局变量。</li><li><code>a</code> 表示参数，<code>[a]</code> 可选，<code>(...)</code> 表示不定参数 <br><ul><li>函数调用在只有一个参数且参数为字符串或表时可以省略括号。</li></ul></li><li>表示方法 <ul><li><code>s</code> 表示 字符串 类型</li><li><code>i</code> 表示 整数 类型</li><li><code>n</code> 表示 浮点数 或 整数 类型</li><li><code>t</code> 表示 表类 型</li><li><code>b</code> 表示 布尔 类型</li><li><code>o</code> 表示 Java对象 类型</li><li><code>f</code> 为 Lua函数</li><li><code>--</code> 表示注释。</li></ul></li></ul><h2 id="each-o" tabindex="-1"><a class="header-anchor" href="#each-o" aria-hidden="true">#</a> each(o)</h2><ul><li>参数：<code>o</code> 实现Iterable接口的Java对象</li><li>返回：用于Lua迭代的闭包</li><li>作用：Java集合迭代器</li></ul><h2 id="enum-o" tabindex="-1"><a class="header-anchor" href="#enum-o" aria-hidden="true">#</a> enum(o)</h2><ul><li>参数：<code>o</code> 实现Enumeration接口的Java对象</li><li>返回：用于Lua迭代的闭包</li><li>作用：Java集合迭代器</li></ul><h2 id="import-s" tabindex="-1"><a class="header-anchor" href="#import-s" aria-hidden="true">#</a> import(s)</h2><ul><li>参数：<code>s</code> 要载入的包或类的名称</li><li>返回：载入的类或模块</li><li>作用：载入包或类或Lua模块</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>import <span class="token string">&quot;http&quot;</span> <span class="token comment">--载入http模块</span>
import <span class="token string">&quot;android.widget.*&quot;</span> <span class="token comment">--载入android.widget包</span>
import <span class="token string">&quot;android.widget.Button&quot;</span> <span class="token comment">--载入android.widget.Button类</span>
import <span class="token string">&quot;android.view.View$OnClickListener&quot;</span> <span class="token comment">--载入android.view.View.OnClickListener内部类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loadlayout-t-t2" tabindex="-1"><a class="header-anchor" href="#loadlayout-t-t2" aria-hidden="true">#</a> loadlayout(t [,t2])</h2><ul><li>参数：<code>t</code> 要载入的布局表，<code>t2</code> 保存view的表</li><li>返回：布局最外层view</li><li>作用：载入布局表，生成view</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>layout<span class="token operator">=</span><span class="token punctuation">{</span>
    LinearLayout<span class="token punctuation">,</span>
    layout_width<span class="token operator">=</span><span class="token string">&quot;fill&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        TextView<span class="token punctuation">,</span>
        text<span class="token operator">=</span><span class="token string">&quot;Androlua&quot;</span><span class="token punctuation">,</span>
        id<span class="token operator">=</span><span class="token string">&quot;tv&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
main<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
activity<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token function">loadlayout</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span>main<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loadbitmap-s" tabindex="-1"><a class="header-anchor" href="#loadbitmap-s" aria-hidden="true">#</a> loadbitmap(s)</h2><ul><li>参数：<code>s</code> 要载入图片的地址，支持相对地址，绝对地址与网址</li><li>返回：bitmap对象</li><li>作用：载入图片</li><li>注意：载入网络图片需要在线程中进行</li></ul><h2 id="task-s-f" tabindex="-1"><a class="header-anchor" href="#task-s-f" aria-hidden="true">#</a> task(s [,...], f)</h2><ul><li>参数：<code>s</code> 任务中运行的代码或函数，<code>...</code> 任务传入参数，<code>f</code> 回调函数</li><li>返回：无返回值</li><li>作用：在异步线程运行Lua代码，执行完毕在主线程调用回调函数</li><li>注意：参数类型包括 布尔，数值，字符串，Java对象，不允许Lua对象</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
    require <span class="token string">&quot;import&quot;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token keyword">end</span>
<span class="token function">task</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>print<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thread-s" tabindex="-1"><a class="header-anchor" href="#thread-s" aria-hidden="true">#</a> thread(s[,...])</h2><ul><li>参数：<code>s</code> 线程中运行的lua代码或脚本的相对路径(不加扩展名)或函数，<code>...</code> 线程初始化参数</li><li>返回：返回线程对象</li><li>作用：开启一个线程运行Lua代码</li><li>注意：线程需要调用quit方法结束线程</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>func<span class="token operator">=</span><span class="token string">[[
a,b=...
function add()
    call(&quot;print&quot;,a+b)
end
]]</span>
t<span class="token operator">=</span><span class="token function">thread</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="timer-s-i1-i2" tabindex="-1"><a class="header-anchor" href="#timer-s-i1-i2" aria-hidden="true">#</a> timer(s,i1,i2[,...])</h2><ul><li>参数：<code>s</code> 定时器运行的代码或函数，<code>i1</code> 前延时，<code>i2</code> 定时器间隔，<code>...</code> 定时器初始化参数</li><li>返回：定时器对象</li><li>作用：创建定时器重复执行函数</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

t<span class="token operator">=</span><span class="token function">timer</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token keyword">false</span><span class="token comment">--暂停定时器</span>
t<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token keyword">true</span><span class="token comment">--重新定时器</span>
t<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--停止定时器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="luajava-bindclass-s" tabindex="-1"><a class="header-anchor" href="#luajava-bindclass-s" aria-hidden="true">#</a> luajava.bindClass(s)</h2><ul><li>参数：<code>s</code> class的完整名称，支持基本类型</li><li>返回：Java class对象</li><li>作用：载入Java class</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>Button<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">bindClass</span><span class="token punctuation">(</span><span class="token string">&quot;android.widget.Button&quot;</span><span class="token punctuation">)</span>
int<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">bindClass</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="luajava-createproxy-s-t" tabindex="-1"><a class="header-anchor" href="#luajava-createproxy-s-t" aria-hidden="true">#</a> luajava.createProxy(s,t)</h2><ul><li>参数：<code>s</code> 接口的完整名称，<code>t</code> 接口函数表</li><li>返回：Java接口对象</li><li>作用：创建Java接口</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>onclick<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token string">&quot;android.view.View$OnClickListener&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>onClick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="luajava-createarray-s-t" tabindex="-1"><a class="header-anchor" href="#luajava-createarray-s-t" aria-hidden="true">#</a> luajava.createArray(s,t)</h2><ul><li>参数：<code>s</code> 类的完整名称，支持基本类型，<code>t</code> 要转化为Java数组的表</li><li>返回：创建的Java数组对象</li><li>作用：创建Java数组</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>arr<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">createArray</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="luajava-newinstance-s" tabindex="-1"><a class="header-anchor" href="#luajava-newinstance-s" aria-hidden="true">#</a> luajava.newInstance(s [,...])</h2><ul><li>参数：<code>s</code> 类的完整名称，<code>...</code> 构建方法的参数</li><li>作用：创建Java类的实例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>b<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;android.widget.Button&quot;</span><span class="token punctuation">,</span>activity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="luajava-new-o" tabindex="-1"><a class="header-anchor" href="#luajava-new-o" aria-hidden="true">#</a> luajava.new(o[,...])</h2><ul><li>参数：<code>o</code> Java类对象，<code>...</code> 参数</li><li>返回：类的实例或数组对象或接口对象</li><li>作用：创建一个类实例或数组对象或接口对象</li><li>注意：当只有一个参数且为表类型时，如果类对象为interface创建接口，为class创建数组，参数为其他情况创建实例</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>b<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>Button<span class="token punctuation">,</span>activity<span class="token punctuation">)</span>
onclick<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>OnClickListener<span class="token punctuation">,</span><span class="token punctuation">{</span>onClick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
arr<span class="token operator">=</span>luajava<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(示例中假设已载入相关类)</p><h2 id="luajava-coding-s-s2-s3" tabindex="-1"><a class="header-anchor" href="#luajava-coding-s-s2-s3" aria-hidden="true">#</a> luajava.coding(s [,s2 [, s3]])</h2><ul><li>参数：<code>s</code> 要转换编码的Lua字符串，<code>s2</code> 字符串的原始编码，<code>s3</code> 字符串的目标编码</li><li>返回：转码后的Lua字符串</li><li>作用：转换字符串编码</li><li>注意：默认进行GBK转UTF8</li></ul><h2 id="luajava-clear-o" tabindex="-1"><a class="header-anchor" href="#luajava-clear-o" aria-hidden="true">#</a> luajava.clear(o)</h2><ul><li>参数：<code>o</code> Java对象</li><li>返回：无</li><li>作用：销毁Java对象</li><li>注意：仅用于销毁临时对象</li></ul><h2 id="luajava-astable-o" tabindex="-1"><a class="header-anchor" href="#luajava-astable-o" aria-hidden="true">#</a> luajava.astable(o)</h2><ul><li>参数：<code>o</code> Java对象</li><li>返回：Lua表</li><li>作用：转换Java的Array List或Map为Lua表</li></ul><h2 id="luajava-tostring-o" tabindex="-1"><a class="header-anchor" href="#luajava-tostring-o" aria-hidden="true">#</a> luajava.tostring(o)</h2><ul><li>参数：<code>o</code> Java对象</li><li>返回：Lua字符串</li><li>作用：相当于 <code>o.toString()</code></li></ul>`,47),l=[i];function o(c,p){return n(),s("div",null,l)}const d=a(t,[["render",o],["__file","api.html.vue"]]);export{d as default};
