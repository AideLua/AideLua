import{_ as d,M as r,p as i,q as h,R as a,t as e,N as n,a1 as c}from"./framework-ea2a9e6e.js";const o={},l=c('<h1 id="activity-部分-api-参考" tabindex="-1"><a class="header-anchor" href="#activity-部分-api-参考" aria-hidden="true">#</a> activity 部分 API 参考</h1><h2 id="setcontentview-layout-env" tabindex="-1"><a class="header-anchor" href="#setcontentview-layout-env" aria-hidden="true">#</a> setContentView(layout, env)</h2><p>设置布局表 <code>layout</code> 为当前 <code>activity</code> 的主视图，<code>env</code> 是保存视图ID的表，默认是 <code>_G</code></p><h2 id="getglobaldata" tabindex="-1"><a class="header-anchor" href="#getglobaldata" aria-hidden="true">#</a> getGlobalData()</h2><p>获取全局数据</p><h2 id="setshareddata-key-value" tabindex="-1"><a class="header-anchor" href="#setshareddata-key-value" aria-hidden="true">#</a> setSharedData(key,value)</h2><p>设置共享数据</p><h2 id="getshareddata-key-def" tabindex="-1"><a class="header-anchor" href="#getshareddata-key-def" aria-hidden="true">#</a> getSharedData(key,def)</h2><p>获取共享数据</p><h2 id="getluapath" tabindex="-1"><a class="header-anchor" href="#getluapath" aria-hidden="true">#</a> getLuaPath()</h2><p>返回当前脚本路径</p><h2 id="getluapath-name" tabindex="-1"><a class="header-anchor" href="#getluapath-name" aria-hidden="true">#</a> getLuaPath(name)</h2><p>返回脚本当前目录的给定文件名路径</p><h2 id="getluapath-dir-name" tabindex="-1"><a class="header-anchor" href="#getluapath-dir-name" aria-hidden="true">#</a> getLuaPath(dir,name)</h2><p>返回脚本当前目录的子目录给定文件名路径</p><h2 id="getluaextpath-name" tabindex="-1"><a class="header-anchor" href="#getluaextpath-name" aria-hidden="true">#</a> getLuaExtPath(name)</h2><p>返回Androlua在SD的工作目录给定文件名路径</p><h2 id="getluaextpath-dir-name" tabindex="-1"><a class="header-anchor" href="#getluaextpath-dir-name" aria-hidden="true">#</a> getLuaExtPath(dir,name)</h2><p>返回Androlua在SD的工作目录的子目录给定文件名路径</p><h2 id="getluadir" tabindex="-1"><a class="header-anchor" href="#getluadir" aria-hidden="true">#</a> getLuaDir()</h2><p>返回脚本当前目录</p><h2 id="getluadir-name" tabindex="-1"><a class="header-anchor" href="#getluadir-name" aria-hidden="true">#</a> getLuaDir(name)</h2><p>返回脚本当前目录的子目录</p><h2 id="getluaextdir" tabindex="-1"><a class="header-anchor" href="#getluaextdir" aria-hidden="true">#</a> getLuaExtDir()</h2><p>返回Androlua在SD的工作目录</p><h2 id="getluaextdir-name" tabindex="-1"><a class="header-anchor" href="#getluaextdir-name" aria-hidden="true">#</a> getLuaExtDir(name)</h2><p>返回Androlua在SD的工作目录的子目录</p><h2 id="getwidth" tabindex="-1"><a class="header-anchor" href="#getwidth" aria-hidden="true">#</a> getWidth()</h2><p>返回屏幕宽度</p><h2 id="getheight" tabindex="-1"><a class="header-anchor" href="#getheight" aria-hidden="true">#</a> getHeight()</h2><p>返回屏幕高度，不包括状态栏与导航栏</p><h2 id="loaddex-path" tabindex="-1"><a class="header-anchor" href="#loaddex-path" aria-hidden="true">#</a> loadDex(path)</h2><p>加载当前目录dex或jar，返回DexClassLoader</p><h2 id="loadlib-path" tabindex="-1"><a class="header-anchor" href="#loadlib-path" aria-hidden="true">#</a> loadLib(path)</h2><p>加载当前目录c模块，返回载入后模块的返回值(通常是包含模块函数的包)</p><h2 id="registerreceiver-filter" tabindex="-1"><a class="header-anchor" href="#registerreceiver-filter" aria-hidden="true">#</a> registerReceiver(filter)</h2><p>注册一个广播接收者，当再次调用该方法时将移除上次注册的过滤器</p><h2 id="newactivity-req-path-enteranim-exitanim-arg" tabindex="-1"><a class="header-anchor" href="#newactivity-req-path-enteranim-exitanim-arg" aria-hidden="true">#</a> newActivity(req, path, enterAnim, exitAnim, arg)</h2><p>打开一个新activity，运行路径为 <code>path</code> 的Lua文件，其他参数为可选，<code>arg</code> 为表，接受脚本为变长参数</p><h2 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> result{...}</h2><p>向来源activity返回数据，在源activity的 <code>onResult</code> 回调</p><h2 id="newtask-func-update-callback" tabindex="-1"><a class="header-anchor" href="#newtask-func-update-callback" aria-hidden="true">#</a> newTask(func[, update], callback)</h2><p>新建一个Task异步任务，在线程中执行 <code>func</code> 函数，其他两个参数可选，执行结束回调 <code>callback</code> ，在任务调用 <code>update</code> 函数时在UI线程回调该函数</p><p>新建的Task在调用 <code>execute{}</code> 时通过表传入参数，在 <code>func</code> 以 <code>unpack</code> 形式接收，执行 <code>func</code> 可以返回多个值</p><h2 id="newthread-func-arg" tabindex="-1"><a class="header-anchor" href="#newthread-func-arg" aria-hidden="true">#</a> newThread(func, arg)</h2><p>新建一个线程，在线程中运行 <code>func</code> 函数，可以以表的形式传入 <code>arg</code> ，在 <code>func</code> 以 <code>unpack</code> 形式接收</p><p>新建的线程调用 <code>start()</code> 方法运行，线程为含有loop线程，在当前activity结束后自动结束loop</p><h2 id="newtimer-func-arg" tabindex="-1"><a class="header-anchor" href="#newtimer-func-arg" aria-hidden="true">#</a> newTimer(func, arg)</h2><p>新建一个定时器，在线程中运行func函数，可以以表的形式传入arg，在 <code>func</code> 以 <code>unpack</code> 形式接收</p><p>调用定时器的 <code>start(delay, period)</code> 开始定时器，<code>stop()</code> 停止定时器，<code>Enabled</code> 暂停恢复定时器，Period属性改变定时器间隔</p><h2 id="其他-api" tabindex="-1"><a class="header-anchor" href="#其他-api" aria-hidden="true">#</a> 其他 API</h2>',51),p={href:"https://developer.android.google.cn/reference/android/app/Activity",target:"_blank",rel:"noopener noreferrer"};function s(u,g){const t=r("ExternalLinkIcon");return i(),h("div",null,[l,a("p",null,[e("您可以访问 "),a("a",p,[e("Android 开发者官网"),n(t)]),e("了解更多内容")])])}const x=d(o,[["render",s],["__file","activityapi.html.vue"]]);export{x as default};
